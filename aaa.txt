# WebTransfer (Frontend Demo)

Dark glass-morphism UI with client-side end-to-end encryption using libsodium (XChaCha20-Poly1305 AEAD with a libsodium-based HKDF-style derivation from the random token) Server is not included; endpoints are placeholders.

## Pages
- `index.html`: upload and encrypt a file, then POST to `/api/upload`.
- `download.html`: fetch encrypted payload from `/api/download?id=...`, decrypt with token from URL fragment.

## Link Format
`https://yourdomain/download.html?id=<fileId>#<token>`
- The fragment after `#` never reaches the server and is used to derive the AES key.

## Expected API
- POST `/api/upload`
  - multipart/form-data fields:
    - `file`: encrypted bytes (application/octet-stream)
    - `iv`: base64url
    - `meta`: base64url (encrypted JSON: `{ name, size, type }`)
    - `notify`: optional email
    - `expiry`: e.g. `7d`, `3d`, `24h`, `dl1`
    - `tokenHash`: SHA-256 base64url of token
  - response JSON: `{ id: string }`

- GET `/api/download?id=<id>`
  - response JSON: `{ iv: base64url, meta: base64url, cipher: base64url }`
  - Server should only store encrypted blobs and hashed token; enforce expiry rules and max downloads.

## Security Notes
- All crypto runs in the browser; the server never receives the token or plaintext.
- Uses HKDF from sodium over a random 16-byte token to derive XChaCha20-Poly1305 AEAD key.
- The token lives in the URL fragment `#token` so it is not sent in HTTP requests.

## Run locally
Serve the folder with a static server to avoid CORS issues, e.g.:
